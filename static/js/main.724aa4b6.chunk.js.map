{"version":3,"sources":["constants/index.js","components/Contact/index.jsx","components/ContactList/index.jsx","components/ContactManager/index.jsx","components/Form/index.jsx","components/Input/index.jsx","components/Modal/index.jsx","App.js","serviceWorker.js","index.js"],"names":["INITIAL_VALUE","name","phone","email","Contact","aria-label","role","ContactList","className","listOfContacts","map","contact","ContactManager","onSubmit","useState","isExpanded","setIsExpanded","onClick","isActive","requiredFields","Object","keys","Form","data","formData","setFormData","onChange","event","target","id","value","stopPropagation","preventDefault","field","key","type","Input","props","htmlFor","Modal","children","App","contacts","setContacts","sort","console","log","filter","concat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.724aa4b6.chunk.js","sourcesContent":["export const INITIAL_VALUE = {name:'',phone:'',email:''}\nexport const DEFAULT_VALUE = \"N/A\"\n","import React from \"react\";\nimport \"./Contact.css\";\nimport { DEFAULT_VALUE } from \"../../constants\";\n\nconst Contact = ({\n  name = DEFAULT_VALUE,\n  phone = DEFAULT_VALUE,\n  email = DEFAULT_VALUE,\n}) => (\n  <tr>\n    <td>{name}</td>\n    <td>{phone}</td>\n    <td>{email}</td>\n    <td>\n      <span aria-label=\"edit\" role=\"img\">\n        {\" \"}\n        ✒️{\" \"}\n      </span>\n    </td>\n    <td>\n      <span aria-label=\"delete\" role=\"img\">\n        {\" \"}\n        🗑️\n      </span>\n    </td>\n  </tr>\n);\nexport default Contact;\n","import React from \"react\";\nimport './ContactList.css';\nimport {Contact} from '..';\n\nconst ContactList = ({ className, listOfContacts =[] }) => (\n  <table className={`contact-list-base${className ? `${className}` : \"\"}`}>\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Phone</th>\n        <th>Email</th>\n        <th>Edit</th>\n        <th>Delete</th>\n      </tr>\n    </thead>\n    <tbody>\n      {listOfContacts.map((contact) => (\n          <Contact {...contact}/>\n      ))}\n    </tbody>\n  </table>\n);\n\nexport default ContactList;\n","import React, { useState } from \"react\";\nimport \"./ContactManager.css\";\nimport { Form, Modal } from \"..\";\n\nconst ContactManager = ({ onSubmit }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const onClick = () => setIsExpanded(!isExpanded);\n\n  return (\n    <>\n      <div className=\"contact-manager-add\" onClick={onClick}>\n        +\n      </div>\n      <Modal onClick={onClick} isActive={isExpanded}>\n        <Form  onSubmit={onSubmit}/>\n      </Modal>\n    </>\n  );\n};\n\nexport default ContactManager;\n","import React, { useState } from \"react\";\nimport \"./Form.css\";\nimport { INITIAL_VALUE } from \"../../constants\";\nimport { Input } from \"..\";\n\nconst requiredFields = Object.keys(INITIAL_VALUE);\n\nconst Form = ({ data = INITIAL_VALUE, onSubmit }) => {\n  const [formData, setFormData] = useState(data);\n  const onChange = (event) =>\n    setFormData({ ...formData, [event.target.id]: event.target.value });\n  const onClick = (event) => event.stopPropagation();\n  const onSubmitWrapper = (event) => {\n    event.preventDefault();\n    onSubmit(formData);\n  };\n\n  return (\n    <form onClick={onClick} className=\"form\" onSubmit={onSubmitWrapper}>\n      {requiredFields.map((field) => (\n        <Input\n          key={field}\n          id={field}\n          onChange={onChange}\n          value={formData[field]}\n        />\n      ))}\n      <Input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n};\nexport default Form;\n","import React from \"react\"\nimport \"./Input.css\"\n\nconst Input = ({ id, ...props }) => (\n    <>\n    {id && (\n    <label className='input-label' htmlFor={id}>\n        {`${id}: `}\n        </label>\n    )}\n    <input id={id} className=\"input-input\"{...props} />\n  </>\n)\nexport default Input;\n","import React from 'react'\nimport './Modal.css'\n\nconst Modal = ({ children, isActive, onClick }) => (\n  <div className={`modal${isActive ? ' active' : ''}`} onClick={onClick}>\n    {children}\n  </div>\n)\n\nexport default Modal\n","import React, { useState } from \"react\";\nimport { ContactList,ContactManager } from \"./components\";\nimport \"./App.css\";\n\nfunction App() {\n  const [contacts, setContacts] = useState([\n    {id:\"1\", name: \"Pippi\",phone:\"0123456789\",email:\"pippi@catworld.co.uk\" },\n    {id:\"2\", name: \"Cat\",phone:\"07593539374\",email:\"cat@happypurring.co.uk\" },\n    {id:\"3\",name: \"Felina\",phone:\"0964827485\",email:\"felina@cathouse.co.uk\" },\n  ]);\n  contacts.sort();\n  console.log(contacts);\n  const addContacts = (data)=>{\n    setContacts(\n      contacts.filter((contact)=>contact.name !==data.name).concat(data),)\n  }\n  return (\n    <div className=\"App\">\n      <h1>Contact List</h1>\n      <ContactManager onSubmit={addContacts} />\n      <ContactList listOfContacts={contacts} />\n      {/* {contacts.map(\n        (elem)=>(<div>{elem.name}</div>))} */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}